choicesCheckbox
choicesCheckbox <- checkboxGroupInput(inputId="InputA",label="Prevalence: People",choices=list(
"Susceptables"="showS",
"Infectives"="showI",
"Recovered"="showR",
"Total Population"="showPop"),
selected=c("Infectives","Susceptables")
)
choicesCheckbox
testMyUI(choicesCheckbox)
letters
??lower
help(toLower)
help(tolower)
class(6)
shuffle(letters)
sample(letters)
sample(letters)
sample(letters)
chartr("abcd",'THFN', "cab")
sample(letters)
set.seed(573982)
sample(letters)
sample(letters)
set.seed(573982)
set.seed(573982)
sample(letters)
cSet <- (c(letter,LETTERS, ".", "?", "!", " "))
set.seed(key("soccer"))
code <- sample(cSet)
open <- paste(cSet, collapse="")
close <- paste(code, collapse="")
chartr(open,close, "The quick brown fox jumped over the cat.")
cSet <- (c(letter,LETTERS, ".", "?", "!", " "))
cSet <- (c(letters,LETTERS, ".", "?", "!", " "))
set.seed(key("soccer"))
code <- sample(cSet)
open <- paste(cSet, collapse="")
close <- paste(code, collapse="")
chartr(open,close, "The quick brown fox jumped over the cat.")
sample(letters)
sample(letters)
drawDistribution <- function(fun=dbeta,param1=1,param2=.5,xlim=c(0,1),xdata=NULL){
x <- seq(xlim[1],xlim[2],length=200)
y <- fun(x, param1,param2)
# Get rid of points not in the domain of the distribution
keep <- is.finite(y)
y <- y[keep]
x <- x[keep]
plot(x,y,type='l',xlim=xlim,lwd=2,col="red",ylim=c(0,max(y)),
ylab="Probability Density", xlab="x", bty="n")
if (!is.null(xdata)) {
points( xdata, rep(0,length(xdata) ),
pch=20, col=rgb(0,0,0,.1) )
dens <- density(xdata)
lines( dens$x, dens$y )
}
}
drawDistribution()
drawDistribution(xdata=runif(100))
dens <- density(xdata)
drawDistribution <- function(fun=dbeta,param1=1,param2=.5,xlim=c(0,1),xdata=NULL){
x <- seq(xlim[1],xlim[2],length=200)
y <- fun(x, param1,param2)
# Get rid of points not in the domain of the distribution
keep <- is.finite(y)
y <- y[keep]
x <- x[keep]
plot(x,y,type='l',xlim=xlim,lwd=2,col="red",ylim=c(0,max(y)),
ylab="Probability Density", xlab="x", bty="n")
if (!is.null(xdata)) {
points( xdata, rep(0,length(xdata) ),
pch=20, col=rgb(0,0,0,.1) )
dens <- density(xdata)
lines( dens$x, dens$y )
}
}
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shiny")
require(shiny)
source('~/.active-rstudio-document', echo=TRUE)
class(dbeta)
source('~/.active-rstudio-document', echo=TRUE)
help(shiny)
source('~/.active-rstudio-document', echo=TRUE)
server = myServer))
source('~/.active-rstudio-document', echo=TRUE)
require(shiny)
y <- fun(x, param1,param2)
drawDistribution(dnorm,.5,1.5,xdata=runif(100),xlim=c(0,2))
),
uniform=list(distParam1='min',distParam2="max",
outsideData <- rbeta(40, shape1=0.2, shape2=1.5)
# stored in a reactive expression.
```{r eval=FALSE}
opts_chunk$set(tidy=FALSE)
require(shiny)
drawDistribution <- function(fun=dbeta,param1=1,param2=.5,xlim=c(0,1),xdata=NULL){
x <- seq(xlim[1],xlim[2],length=200)
y <- fun(x, param1,param2)
# Get rid of points not in the domain of the distribution
keep <- is.finite(y)
y <- y[keep]
x <- x[keep]
plot(x,y,type='l',xlim=xlim,lwd=2,col="red",ylim=c(0,max(y)),
ylab="Probability Density", xlab="x", bty="n")
if (!is.null(xdata)) {
points( xdata, rep(0,length(xdata) ),
pch=20, col=rgb(0,0,0,.1) )
dens <- density(xdata)
lines( dens$x, dens$y )
}
}
drawDistribution(dnorm,.5,1.5,xdata=runif(100),xlim=c(0,2))
myUI <- div(
div(class='jumbotron masthead',
h3('The β Distribution'),
p('Showing the shape of the β distribution.' ),
actionButton(inputId="submitted","Send in your parameters.")
),
div(class='row span9 well',
div(class='span3 well',
selectInput("distDistrib","Choice of Distribution",
list(uniform="uniform",gaussian="normal",
beta="beta", "chi squared" ="chisq"),
selected="beta"),
sliderInput("distParam1", "Parameter 1", min=0.01,max=2,step=0.01, value=0.5),
sliderInput("distParam2", "Parameter 2", min=0.01,max=2,step=0.01, value=0.1)
),
div(class='span4 well',
plotOutput("distPlot1"),
sliderInput("distXrange", "X-axis Range",
min=-10, max=10, step=0.5, value=c(0,1))
)
)
)
paramNames <- function(name){
res <- switch(EXPR=name,
uniform=list(distParam1='min',distParam2="max",
domain=c(-Inf,Inf),
fun=function(x,param1,param2){
if( param1 >= param2 ) stop("Max must be larger than min")
dunif(x,min=param1,max=param2)}),
normal=list(distParam1='mean',distParam2="sd",
domain=c(-Inf,Inf),
fun=function(x,param1,param2){
dnorm(x,mean=param1,sd=param2)}),
beta=list(distParam1='a',distParam2="b",
domain=c(0.001,.999),
fun=function(x,param1,param2){
dbeta(x,shape1=param1,shape2=param2)}),
chisq=list(distParam1='df', distParam2='-- not used --',
domain=c(0,Inf),
fun=function(x, param1,param2){
dchisq(x,df=param1)})
)
return(res)
}
outsideData <- rbeta(40, shape1=0.2, shape2=1.5)
myServer <- function(input,output,session){
# Information that's expensive to calculate or that
# more than one function needs can be
# stored in a reactive expression.
distInfo <- reactive( paramNames(input$distDistrib) )
# Send something new to the plot
output$distPlot1 <- renderPlot({
info <- distInfo()
drawDistribution(fun=info$fun,
param1=input$distParam1, param2=input$distParam2,
xdata=outsideData, xlim=input$distXrange )
})
# Change the slider names
observe( {
input$distDistrib # creates the dependancy
nms <- distInfo()
updateSliderInput(session, inputId='distParam1',
label=nms[['distParam1']])
updateSliderInput(session, inputId='distParam2',
label=nms[['distParam2']] )
})
}
runApp(list(ui = bootstrapPage(myUI),
server = myServer))
require(devtools)
require(COMP121)
table1("edit")
table1 <-collaborate(doc="table1",buffermode="r")
table1("edit")
require(manipulate)
install.packages("manipulate")
buffer("source")
require(manipulate)
require(shiny)
userIDbox <- textInput(inputId="text1",
label="User ID",
value="UserID here.")
classChoicebox <- textInput(inputId="text1",
label="Class Choice:",
value="Class number here.")
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12',
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection')),
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here.")
)
)
ourServer <- function(input,output,session){
}
require(manipulate)
require(shiny)
userIDbox <- textInput(inputId="text1",
label="User ID",
value="UserID here.")
classChoicebox <- textInput(inputId="text1",
label="Class Choice:",
value="Class number here.")
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12',
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection'),
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here.")
)
)
ourServer <- function(input,output,session){
}
)))
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12'),
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection',
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here.")
)))
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12',
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection'),
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here")
)
)
)
require(devtools)
install_github("DCF", username="dtkaplan")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("mosaic", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
require(DCF)
require(mosaic)
require(DCF)
require(devtools)
require(ggplot2)
load(http://github.com/dtkaplan/DCF/raw/master/data/nhanes.rda)
data(nhanes)
class(nhanes)
names(nhanes)
nrow(nhanes)
nhanes[1:5,1:6]
nhanes[3,]
table(nhanes$age)
plot(nhanes$weight ~ nhanes$height)
plot(nhanes$wgt ~ nhanes$hgt)
plot(wgt ~ hgt, data=nhanes)
small <- sample(nhanes, size=1000)
plot(wgt ~ hgt, data=small)
with(small, table(diab))
plot(wgt ~ hgt, data=small, col="red")
plot(wgt ~ hgt, data=small, col="red","blue")
plot(wgt ~ hgt, data=small, col=c("red","blue"))
diacolors <- with(small, ifelse(diab==0,"blue","red"))
plot(wgt ~ hgt, data=small, col=diacolors)
diasize <- with(small, ifelse(diab==0,1,3))
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize)
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize, pch=20)
diacolors <- with(small, ifelse(diab==0,alpha("blue",.2) alpha("red",.4)))
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize, pch=20)
diacolors <- with(small, ifelse(diab==0,alpha("blue",.2), alpha("red",.4)))
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize, pch=20)
mPlot(small)
ggplot(data=small, aes(x=hgt, y=wgt)) + geom_point()  + aes(colour=diab) + aes(size=diab) + theme(legend.position="right") + labs(title="")
ggplot(data=small, aes(x=hgt, y=wgt)) + geom_point()  + aes(colour=diab) + aes(size=sex) + theme(legend.position="right") + labs(title="")
data(WakeVotersSmall)
names(WakeVotersSmall)
WakeVotersSmall$first_name
table(WakeVotersSmall$gender)
V <- WakeVotersSmall[[c("gender", "first_name")]]
V <- WakeVotersSmall[c("gender", "first_name")]
class(V)
head(V)
count <- with(V,table(first_name))
lenght(count)
length(count)
with(V,class(first_name))
head(count)
V$FN <- with(V, as.character(first_name) )
head(V)
class(FN)
with(V, class(FN))
with(V, first_name[1:5])
counts = with(V, table(FN))
head(counts)
head(sort(counts, descedning=TRUE))
head(sort(counts, decreasing=TRUE))
nameCounts <- (sort(counts, decreasing=TRUE))
plot(nameCounts)
plot(cumsum(nameCounts))
head(sort(counts, decreasing=TRUE), 200)
head(V)
with(V,order(gender))
bySex <- V[with(V, order(gender)),]
head(bySex)
guys <- subset(V, gender=="M")
girls <- subset(V, gender=="F")
head(girls$FN)
head(guys$FN)
haed(unique(guys$FN))
head(unique(guys$FN))
head(unique(girls$FN))
girls$FN %in% guys$FN
inBoth <- girls$FN %in% guys$FN
table(inBoth)
intersection(girls$FN, guys$FN)
intersect(girls$FN, guys$FN)
guyCount <- table(guys$FN)
girlCount <- table(girls$FN)
head(guyCount)
head(girlCount)
girlFrame <- data.frame(girlCount)
head(girlFrame)
names(girlFrame)
names(girlFrame) <- c("Name", "Females")
names(guyFrame) <- c("Name", "Males")
names(guyFrame)
names(guysFrame) <- c("Name", "Males")
head(cbind(guyFrame, girlFrame) )
guyFrame <- data.frame(guyCount)
head(cbind(guyFrame, girlFrame) )
subset(girlFrame, Name=="Aaron")
both <- merge(guyFrame, girlFrame)
head(both)
both <- merge(guyFrame, girlFrame)
head(both)
head(both, 50)
both$ratio <- with(both, Female/Male)
head(both)
subset(both, ratio > 10)
subset(both, ratio < .10)
subset(both, ratio == 1)
subset(both, ratio < 3, & ratio > .3)
subset(both, ratio < 3 & ratio > .3)
savehistory("~/Documents/Intro to Scientific Programming/CS121-Work/Day-22/Nov 19 console stuff.Rhistory")
DataExample <- KidsFeet[seq(1,nrow(KidsFeet),by=4),
c("sex","width","length","domhand")]
require(mosaic)
DataExample <- KidsFeet[seq(1,nrow(KidsFeet),by=4),
c("sex","width","length","domhand")]
DataExample
DataExample["width"]
nrow(DataExample)
names(DataExample)
mycol="width"
Dataexample[mycol]
DataExample[mycol]
DataExample[mycol,"length"]
DataExample[c(mycol,"length")]
require(plyr)
install.packages("plyr")
require(plyr)
res <- mutate(DataExample, aspect=round(length/width,2),
area=round(width*length,2))
res
res <-MyData
MyData <- mutate(DataExample, widthIn=width/2.54, lengthIn=length/2.54,widthGroup=ntiles(width))
MyData
MyData <- mutate(DataExample, widthIn=width/2.54, lengthIn=length/2.54,widthGroup=ntiles(width,4))
MyData
MyData2 <- summarize(DataExample, aspect=round(length/width,2),
area=round(width*length,2), sex=sex)
MyData2
subset(DataExample, sex=="G")
ddply(DataExample, ~ sex, summarize, aspect=mean(width/length))
ddply(DataExample, ~ sex + domhand, summarize, aspect=mean(width/length))
bySex = ddply(DataExample, ~ sex, summarize, smallest=min(length))
join(DataExample, bySex)
bySex
data(OrdwayBirds)
require(DCF)
data(OrdwayBirds)
counts <- data.frame(with(OrdwayBirds, table(species.name,Month)))
ggplot(data=counts,aes(x=Month,y=Freq ,fill=species.name))+geom_bar(stat='identity',position=position_stack(width=.9))
names(OrdwayBirds)
with(OrdwayBirds,length(unique,species.name))
with(OrdwayBirds,length(unique(species.name)))
list(species.name)
with(DataExample, table(sex))
data.frame(with(DataExample, table(sex)))
ddply(DataExample, ~ sex, summarize, length(width))
with(OrdwayBirds, table(species.name))
counts <- data.frame(with(OrdwayBirds, table(species.name)))
counts
subset(counts, Freq>50)
new <- join(OrdwayBirds, counts)
new
names(new)
new[1,]
commonBirds <- subset(new, Freq>50)
commonBirds
nrow(commonBirds)
with(commonBirds, unique(species.name))
translate <- fetchData(“https://docs.google.com/spreadsheet/pub?key=0Av2C2RiwUxpVdFlPWUp6NERSQzhld3o4QklQd1p6d2c&single=true&gid=0&output=csv”)
translate
translate <- fetchGoogle(“https://docs.google.com/spreadsheet/pub?key=0Av2C2RiwUxpVdFlPWUp6NERSQzhld3o4QklQd1p6d2c&single=true&gid=0&output=csv”)
translate
join(OrdwayBirds, translate)
names(translate)
names(translate)[1] <- "spiecies.name"
mutate(translate, species.name=SpeciesName)
new <- join(OrdwayBirds, translate)
names(new)
counts <- data.frame(with(new, table(SpeciesNameCleaned)))
head(counts)
join(new, counts)
common <- subset(both, Freq>50)
fetchGoogle("https://docs.google.com/spreadsheet/pub?key=0Av2C2RiwUxpVdFlPWUp6NERSQzhld3o4QklQd1p6d2c&single=true&gid=0&output=csv")
nrow(common)
mBar(common)
as.data.frame(with(common,table(Month, SpeciesNameCleaned)))
final <- as.data.frame(with(common,table(Month, SpeciesNameCleaned)))
mBar(final)
common <- subset(both, Freq>50)
common <- factor(common, drop=TRUE)
require(mosaic)
require(plyr)
require(reshape2)
require(DCF)
grades <- fetchData("grades.csv")
courses <- fetchData("courses.csv")
grades
nrow(grades)
ncol(grades)
head(grages)
head(grades)
names(grades)
gpoints <- fetchData("grade-to-number.csv")
head(gpoints)
nrow(gpoints)
ncol(gpoints)
gpoints
gp <- gpoints
gp
both <- join(grades,gp)
head(both)
with(both,table(gradepoint,grade))
ddply(both, ~grade,summarize,length(grade))
ddply(both, ~grade,summarize,mn=mean(gradepoint))
ddply(both, ~grade,summarize,mn=mean(gradepoint),var=sd(gradepoint))
ddply(both, ~sid, summarize, gpa=mean(gradepoint))
perStudent <- ddply(both, ~sid, summarize, gpa=mean(gradepoint),med=median(gradepoint)
)
mutate(perStudent,skew=gpa>med)
perStudent <- ddply(both, ~sid, summarize, gpa=mean(gradepoint,na.rm=TRUE),med=median(gradepoint,na.rm=TRUE))
mutate(perStudent,skew=gpa>med)
lowest <- ddply(both, ~sid, summarize, min=min(gradepoint))
lowest
lowest <- ddply(both, ~sid, summarize, min=min(gradepoint,na.rm=TRUE))
lowest
subset(lowest, min<=2)
ncol(subset)
vacations <- subset(lowest, min<=2)
ncol(vacations)
crow(vacations)
nrow(vacations)
courses <- fetchData("courses.csv")
head(courses)
major <- join(courses,sessionID)
major <- join(courses,grades)
head(major)
table(dept)
list(dept)
with(major,table(dept))
department <- with(major,table(dept))
majorfreq <- function(v){T <- table(v), ind <- which.max(T), name(T)[ind]}
savehistory("~/Documents/Intro to Scientific Programming/CS121-Work/Day-24/console work.Rhistory")
