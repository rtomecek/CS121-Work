v[c(3,5,7)]
"fred" <- c(5,6,7)
"fred"
`any name at all here` <- c(4,3,6)
v <- 1:10
v[3] <- 77
v
paste(3, 5)
paste(3, "five", FALSE)
strsplit("What kind of thing?", "n")
strsplit(c("No n's in this", "What kind of thing?", "n"))
strsplit(c("No n's in this", "What kind of thing?"), "n")
list("Matrix", c(1,2,3), FALSE)
fred <- list("Matrix", c(1,2,3), FALSE)
fred[[3]]
fred[3]
fred[4] <- "now is the time"
fred
fred[4] <7
fred[10] <- "ten"
fred[10]
fred[[10]]
fred <- list(Hamline="Matrix", carleton=c(1,2,3), mac=FALSE)
fred[Hamline]
fred["Hamline"]
fred[2]
fred[[2]]
fred <- list(Hamline="Matrix", carleton=c(a=1,b=2,c=3), mac=FALSE)
fred[["carleton"]]
fred[["carleton"]]['c']
fred[["carleton"]][['c']]
c("becomes", "ages")
any('b' == "becomes")
grep("b",c("becomes", "ages"))
grepl("b",c("becomes", "ages"))
v=c("becomes", "ages"))
v=c("becomes", "ages")
sub('e','*',v)
gsub('e','*',v)
gsub('aeiou','*',v)
gsub('a,e,i,o,u','*',v)
gsub('[aeiou]','*',v)
gsub('[aeiou]','*vowel*',v)
gsub('[aeiou]',v)
grep('[aeiou]',v)
grep('[bs]',v)
grepl('[bs]',v)
grepl('^[b].*[s]$',v)
grepl("^[b].q..$")
grepl("^[b].q..$",v)
words <- readLines(url("http://dtkaplan.github.io/ScientificComputing/Syllabus/Daily/Day-07/word_list_moby_crossword-flat/word_list_moby_crossword.flat.txt"))
length(words)
grepl("^[b].q..$",words)
grep("^[b].q..$",words)
grep("^[b].q...$",words)
words[grep("^[b].q...$",words)]
words[grep("^[a]..i....$",words)]
words[grep("^[a]..i....r$",words)]
dictionary = c(run="walk fast or gallop", sleep="not be awake, to dream", chair="object for sitting, the person who runs a meeting")
roget(word,dictionary)
roget <- function(word,definitions)
{}
roget <- function(word,definitions) {
matched <- grep(word,definitions)
names(definitions)[matched])}
roget( "run" ,dictionary)
roget("awake", definitions)
roget <- function(word,definitions) {
matched <- grep(word,definitions)
return(names(definitions)[matched])}
roget("awake",definitions)
roget("awake",dictionary)
plot()
canvas()
canvas
canvas <- function(mn=0,mx=100){
plot( 1:2,ylim=c(mn,mx), xlim=c(mn,mx))}
canvas()
circle <- function(x,y,r,...){
angs <- seq(0,2*pi, length=20)
xpts <- x+r*cos(angs)
ypts <- y+r*sin(angs)
polygon(xpts,ypts,...)}
circle(50,50,20,col="blue")
rev()
help(strsplit)
reverser <- function(word){strsplit
strsplit(character)}
strsplit("hello")
reverser <- function(word){
strsplit(nchar)
help(strsplit)
}
help(strsplit)
strsplit(1:5)
strsplit("1:5")
srtsplit("hello", "")
strsplit("hello", "")
help(nchar)
help(strsplit)
rev(1:5)
reverser(1:5)
strsplit("3", "four")
strsplit(1:5, "")
strsplit("hello","")
rev(strsplit("hello",""))
help(lapply)
strsplit("hello", "")
rev(strsplit("hello",""))
strsplit("1","2","3")
strsplit("1,2,3", "")
strsplit("1,2,3" "")
strsplit("123", "")
rev(cat)
rev("cat")
rev("cat","dog")
help(rev)
strsplit("hello","")
computer
computer(1:8)
nchar("computer")
strsplit(nchar("computer"))
strsplit("computer","")
x=strsplit("computer","")
x[[1]][3]
x[3]
x[[1]][3]
rev(x[[1]])
nchar(x)
paste(x,collapse="")
paste(rev[[1]])
paste(rev(x[[1]]))
paste(rev(x[[1]]), collapse="")
help(nchar)
canvas <- function(mn=0,mx=100){
+ plot( 1:2,ylim=c(mn,mx), xlim=c(mn,mx))}
> canvas()
> circle <- function(x,y,r,...){
+ angs <- seq(0,2*pi, length=20)
+ xpts <- x+r*cos(angs)
+ ypts <- y+r*sin(angs)
+ polygon(xpts,ypts,...)}
> circle(50,50,20,col="blue")
savehistory("~/Documents/Intro to Scientific Programming/notes.Rhistory")
canvas <- function(mn=0,mx=100){
+ plot( 1:2,ylim=c(mn,mx), xlim=c(mn,mx))}
canvas()
circle <- function(x,y,r,...){
+ angs <- seq(0,2*pi, length=20)
+ xpts <- x+r*cos(angs)
+ ypts <- y+r*sin(angs)
+ polygon(xpts,ypts,...)}
circle(50,50,20,col="blue")
circle <- function(x,y,r,...){ angs <- seq(0,2*pi, length=20)
+ xpts <- x+r*cos(angs)
+ ypts <- y+r*sin(angs)
+ polygon(xpts,ypts,...)}
circle <- function(x,y,r,...){ angs <- seq(0,2*pi, length=20)
+ + xpts <- x+r*cos(angs)
+ + ypts <- y+r*sin(angs)
+ + polygon(xpts,ypts,...)}
canvas <- function(mn=0,mx=100){
plot( 1:2,ylim=c(mn,mx), xlim=c(mn,mx))}
canvas()
circle <- function(x,y,r,...){
angs <- seq(0,2*pi, length=20)
xpts <- x+r*cos(angs)
ypts <- y+r*sin(angs)
polygon(xpts,ypts,...)}
circle(50,50,20,col="blue")
circle(50,50,20,col="blue",asp=1)
square <- function(x,y,...){
polygon(xpts,ypts,...)}
square((20,40,40,20),(60,60,40,40))
square(c(20,40,40,20),c(60,60,40,40))
xlab="X Label"
ylab="Y Label"
circle(35,70,20,col="purple")
circle(35,70,20,col="pink")
polygon(c(20,40,40,20),c(60,60,40,40))
polygon(c(20,40,40,20),c(60,60,40,40),col="green",border="blue")
polygon(c(20,40,40,20),c(60,60,40,40),col="green",border="blue",lwd=10)
help(rgb)
??alpha
alpha("pink",.3)
scales::alpha("pink",.3)
source('~/.active-rstudio-document', echo=TRUE)
polygon(c(30,40,40,30)c(30,30,20,20),col="red", border="black")
polygon(c(30,40,40,30),c(30,30,20,20),col="red", border="black")
polygon(c(60,40,70,80,55),c(55,30,55,45,45),col="yellow")
polygon(c(60,75,90,85,65),c(55,70,55,45,45),col="yellow")
polygon(c(60,75,90,85,65),c(55,70,55,35,35),col="yellow")
polygon(c(60,75,90,85,65),c(65,80,65,45,45),col="yellow")
polygon(c(60,75,90,85,65),c(65,80,65,45,45),col=scales::alpha("yellow",.3))
TRUE <- FALSE
function
{}
help(function)
factorial
factorail(6)
factorial960
factorial(6)
my factorial <- function(n){
myfactorial <- function(n){
prod(1:n)
}
myfactorial <- function(n){
res <- 1
for (k in 1:n){
res <- res * k }}
myfactorial(5)
myfactorial <- function(n)
res <- 1
for (k in 1:n) {
res <- res * k
}
myfactorial <- function(n){
res <- 1
for (k in 1:n) {
res <- res * k
}
return(res)
}
myfactorial(5)
mysum <- function(n){
res <- 1
for (k in 1:n){
res <- res + k
}
return(res)
}
mysum(1:10)
mysum <- function(n){
res <- 0
for (k in 1:n){
res <- res + k
}
return(res)
}
mysum(1:10)
mysum(10)
mysum(15)
words <- readLines(url("http://dtkaplan.github.io/ScientificComputing/Syllabus/Daily/Day-07/word_list_moby_crossword-flat/word_list_moby_crossword.flat.txt"))
words()
words
findScrabble <- function(letters){
words[grep(letters[1],words)]
}
findScrabble(c("b","n","r"))
findScrabble<-function(letters){
words<-words[grep(letters[1],words)]
words<-words[grep(letters[2],words)]
words<-words[grep(letters[3],words)]}
length(findScrabble)
length(findScrabble(c("b","n","r")))
findScrabble<-function(letters){
for(k in 1:3){
words<-words[grep(letters[k],words)]}
return(words)
}
length(findScrabble(c("b","n","r")))
findScrabble<-function(letters){
for(k in 1:length(letters)){
words<-words[grep(letters[k],words)]}
}
return(words)
findScrabble<-function(letters){
for(k in 1:length(letters)){
words<-words[grep(letters[k],words)]
}
return(words)
}
length(findScrabble(c("b","n","r","w",)))
findScrabble<-function(letters){
for(k in 1:length(letters))
words<-words[grep(letters[k],words)]
if(length)}}}}
findScrabble<-function(letters){
for(k in 1:length(letters)){
words<-words[grep(letters[k],words)]
if(length(words)<10) break
}
return(words)
}
length(findScrabble(c("b","n","r")))
length(findScrabble(c("b","n","r","x")))
length(findScrabble(c("b","n","r","x","a","c")))
length(findScrabble(c("b","n","r","x","a","c","z")))
current <- 0
beforeIt <- 1
for (k in 1:n){
tmp <- current+beforeIt
beforeIt <- current
current <- tmp
}
return(current)
}
fib <- function(n){
current <- 0
beforeIt <- 1
for (k in 1:n){
tmp <- current+beforeIt
beforeIt <- current
current <- tmp
}
return(current)
}
fib(6)
fib(7)
fib(8)
list(fib)
sofar = (c(0,1,1,2))
for (kin 3:n) {
sofar = (c(0,1,1,2))
for (k in 3:n) {
sofar[k] <- sofar[k-1] + sofar[k-2]
sofar = (c(0,1,1,2)){
sofar = (c(0,1,1,2)){
sofar = (c(0,1,1,2)) {
sofar=(c(0,1,1,2)){
sofar <- (c(0,1,1,2)){
sofar = c(0,1)
for (k in 3:n) {
sofar[k] <- sofar[k-1] + sofar[k-2]
}
return(sofar)
}
fib <- function(n){
sofar = c(0,1)
sofar[k] <- sofar[k-1] + sofar[k-2]{
fib <- function(n){
for (k in 3:n) {
sofar[k] <- sofar[k-1] + sofar[k-2]
}
return(sofar)
}
fib(323)
> fib <- function(n){
+ if (n < 0 | round(n) !=n) {
+ warning("Your n was no good")
+ return(NA)
+ }
+ for (k in 3:n) {
+ sofar[k] <- sofar[k-1] + sofar[k-2]
+ }
+ return(sofar)
+ }
fib(-3)
geuss <- rep(TRUE,100){
guess <- rep(TRUE,100)
for (k in 2:100)
guess [(1:100)%%k==0]<- FALSE
for (k in 2:100)
guess [(1:100)%%k==0&(1:100)>k]<- FALSE
guess <- rep(TRUE,100)
for (k in 2:100){
guess [(1:100)%%k==0&(1:100)>k]<- FALSE
}
return(which(guess))
guess <- rep(TRUE,100){
guess <- rep(TRUE,n)
primeSieve <- function
9n
primeSieve <- function(n){
guess <- rep(TRUE,n)
inds <- 1:n
for (k in 2:n) {
guess[ (inds%%k)==0 & inds > k]<- FALSE
}
return(which(guess))
}
primeSieve(100)
primeSieve <- function(n){
guess <- rep(TRUE,n)
inds <- 1:n
for (k in 2:n) {
if(guess[k])
guess[ (inds%%k)==0 & inds > k]<- FALSE
}
return(which(guess))
}
primeSieve(10000)
savehistory("~/Documents/Intro to Scientific Programming/october3notes.Rhistory")
repeat{5}
mySum <- function (v){
sofar <- 0
k <- 1
v <- c(5,4,2,10)
sofar <- sofar v[k]
mySum <- function(v){
sofar <- 0
k <- 1
v <- c(5,4,2,10)
sofar <- sofar + v[k]
}
mySum <- function(v){
sofar <- 0
k <- 1
v <- c(5,4,2,10)
repeat{
sofar}
}
mySum <- function(v) {
sofar <- 0
k <- 1
repeat{
sofar <- sofar + v[k]
k <- k+1
if (k == length(v)+1)break
}
return(sofar)
}
mySumwhile <- function(v) {
sofar <- 0
k <- 1
repeat{
sofar <- sofar + v[k]
k <- k + 1
if (k == (length(v)+1))
break
}
return(sofar)
}
mySumFor <- function(v){
# set up state
sofar <- 0
# loop
for (k in 1:length(v)) {
# update state
sofar <- sofar + v[k]
}
# what to do with results
return(sofar)
}
mySumwhile <- function (v){
# set up state
sofar <- 0
k <- 1
# loop
while(k != (length(v)+1) ){
# update state
sofar <- sofar + v[k]
k <- k+1
}
# what to do with results
return(sofar)
}
mySumFor(NULL)
myRunningSum <- function(v){
# set up state
sofar <- 0
res <- c()
for (k in 1:length(v)) {
# update state
sofar <- sofar + v[k]
res <- c(res,sofar)
}
# What to do with results
return(res)
}
rev(myRunningSum(1:10))
#f3
savehistory("~/Documents/Intro to Scientific Programming/CS121-Work/Day-11/history.Rhistory")
time <- 5
c(5,"")
print(time,"")
print(time)
x <- print(time)
blastoffWhile <- function(time){ # Time is a positive integer in seconds
while(time!=0){
Sys.sleep(1)
cat(time,"")
time <- time-1
}
Sys.sleep(1)
cat("Blastoff!")
}
blastoffWhile(5)
blastoffWhile <- function(time){ # Time is a positive integer in seconds
while(time!=0){
Sys.sleep(1)
cat(time,"\n")
time <- time-1
}
Sys.sleep(1)
cat("Blastoff!")
}
blastoffWhile(5)
date()
now <- date()
now <- Sys.time()
now
class(date)
class(date())
clasee(now())
clase(now())
class(now())
class(Sys.time())
Sys.time() - now
now < Sys.time()
Sys.time() - now
now <- Sys.time()
Sys.time() - now
as.numeric(Sys.time() - now)
system("say sheep in the meadow")
system("say five, four, three, two, one. blastoff!")
readline("say this when you're ready.")
readline("Say this when you're ready.")
readline("Prompt: ")
typed <- readline("Prompt: ")
typed
savehistory("~/Documents/Intro to Scientific Programming/CS121-Work/Day-12/day-12-notes.Rhistory")
