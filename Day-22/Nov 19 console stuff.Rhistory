library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
betaApp(4)
drawBeta <- function(shape1, shape2,...){
x <- seq(0,1,length=101)
plot(1:2, ylim=c(0,5), xlim=c(0,1), xlab ="x", ylab = "Prob Density",type ="n")
lines(x,dbeta(x,shape1=shape1,shape2=shape2),lwd=...)
}
betaApp <- function(pts){
manipulate( {drawBeta(a,b,col=color,lwd=thick);
points(pts,rep(0,length(pts)))},
a = slider(0,10,initial=1, label="a",step=.2),
b = slider(0,10,initial=2, label="b", step=.2),
color = picker( list("red","blue","green" ) ),
thick = slider(0,10,initial=3, label="lwd",step=.2)
)
}
betaApp(4)
require(mosaic)
install.packages("mosaic")
fetchData("mPP.R")
fetchData("DiffEQ.R")
mPP()
fetchData("mLM.R")
mLM(wage ~ sex + sector + educ + exper, data = CPS85)
fetchData("mLM.R")
mLM(wage ~ sex + sector + educ + exper, data = CPS85)
fetchData("mLM.R")
mLM(wage ~ sex + sector + educ + exper, data = CPS85)
fetchData("mHypTest.R")
mHypTest()
displayTree <- function(tree) {
treehelper <- function(tree, preface = "", mark = "", named = FALSE) {
L <- length(tree)
if (length(tree) > 0) {
if (is.list(tree) | is.call(tree)) {
cat(paste(preface, mark, "====>|", sep = ""))
treehelper(tree[[1]], preface = "", named = named)  # keep it on the same line.
# preface <- paste(preface,' |',sep='')
if (L > 1) {
for (k in 2:L) {
cat(paste(preface, "     |\n", sep = ""))
treehelper(tree[[k]], named = named, mark = ifelse(k ==
L, "|", ""), preface = paste(preface, ifelse(k == L, "     ",
"     |"), sep = ""))
}
}
} else {
separator <- ifelse(named & tree == toupper(tree), "name:",
"-> ")
cat(paste(preface, mark, separator, tree, "\n", sep = ""))
}
}
}
# Now call treehelper on the tree
if (inherits(tree, "formula")) {
treehelper(tree[[-1]], named = FALSE)
# [-1] is to skip the ~
} else treehelper(tree, named = TRUE)
}
dsiplayTree( ~ integrate(1/x, x))
displayTree( ~ integrate(1/x, x))
displayTree( ~ ezp(-k*t)sin*(omega*t) )
displayTree( ~ exp(-k*t)sin*(omega*t) )
displayTree( ~ exp(-k*t)*sin(omega*t) )
displayTree( ~ integrate(y, x))
displayTree( ~ integrate(3/x^4,x))
displayTree( ~ integrate((1/a)*x^3 , x))
displayTree(~ cos(x/2))
displayTree(~ cos(x^2))
c(1:10,2:10)
list(1:10,2:10)
displayTree(animalList)
animalList <- list("Animals", list("Domesticated")(list("Horse", "Cat", "Dog")) , list("Wild") (list("Lion", "Tiger", "Bear", "Moose")))
display(animalList)
displayTree(animalList)
displayTree(~animalList)
displayTree(animalList)
animalList <- list("Animals", list("Domesticated",list("Horse", "Cat", "Dog")) , list("Wild",list("Lion", "Tiger", "Bear", "Moose")))
displayTree(animalList)
require(COMP121)
shared <- collaborate(doc="countries")
shared("edit")
ourTree <- list("The World",
list("Non-Continental", list("Fiji","New Zealand")),
list("Continental",
list("Africa", list("Ghana", "Kenya", "Morocco")),
list("Americas",
list("North", list("Canada","Mexico")),
list("South",list("Chile","Bolivia"))),
list("Antarctica"),
list("Asia",
list("Thailand", "Bhutan", "Mongolia")),
list("Australia"),
list("Europe",
list("Slovakia", "Romania"))))
displayTree(ourTree)
require(shiny)
install.packages("shiny")
source('~/Documents/Intro to Scientific Programming/CS121-Work/Day-19/myUI thing using shiny.R', echo=TRUE)
source('~/Documents/Intro to Scientific Programming/CS121-Work/Day-19/myUI thing using shiny.R', echo=TRUE)
source('~/Documents/Intro to Scientific Programming/CS121-Work/Day-19/myUI thing using shiny.R', echo=TRUE)
source('~/Documents/Intro to Scientific Programming/CS121-Work/Day-19/myUI thing using shiny.R', echo=TRUE)
help(qunatile)
help(quantile)
plot(Titanic)
table(presidents)
plot(USArrests)
table(USArrests)
table(Titanic)
plot(Titanic)
plot(USArrests)
summary(USArrests)
require(shiny)
install.packages("shiny")
testMyUI <- function(UI,serverFun=function(input,output){})
{
runApp( list(ui=bootstrapPage(UI),server = serverFun))
}
testMyUI()
testMyUI <- function(UI,serverFun=function(input,output){})
{
runApp( list(ui=bootstrapPage(UI),server = serverFun))
}
choicesCheckbox <- checkboxGroupInput(inputID="InputA",label="Prevalence: People",choices=list(
"Susceptables"="showS",
"Infectives"="showI",
"Recovered"="showR",
"Total Population"="showPop"),
selected=c("Infectives","Susceptables")
)
tesMyUI(choicesCheckbox)
testMyUI(choicesCheckbox)
choicesCheckbox
choicesCheckbox <- checkboxGroupInput(inputId="InputA",label="Prevalence: People",choices=list(
"Susceptables"="showS",
"Infectives"="showI",
"Recovered"="showR",
"Total Population"="showPop"),
selected=c("Infectives","Susceptables")
)
choicesCheckbox
testMyUI(choicesCheckbox)
letters
??lower
help(toLower)
help(tolower)
class(6)
shuffle(letters)
sample(letters)
sample(letters)
sample(letters)
chartr("abcd",'THFN', "cab")
sample(letters)
set.seed(573982)
sample(letters)
sample(letters)
set.seed(573982)
set.seed(573982)
sample(letters)
cSet <- (c(letter,LETTERS, ".", "?", "!", " "))
set.seed(key("soccer"))
code <- sample(cSet)
open <- paste(cSet, collapse="")
close <- paste(code, collapse="")
chartr(open,close, "The quick brown fox jumped over the cat.")
cSet <- (c(letter,LETTERS, ".", "?", "!", " "))
cSet <- (c(letters,LETTERS, ".", "?", "!", " "))
set.seed(key("soccer"))
code <- sample(cSet)
open <- paste(cSet, collapse="")
close <- paste(code, collapse="")
chartr(open,close, "The quick brown fox jumped over the cat.")
sample(letters)
sample(letters)
drawDistribution <- function(fun=dbeta,param1=1,param2=.5,xlim=c(0,1),xdata=NULL){
x <- seq(xlim[1],xlim[2],length=200)
y <- fun(x, param1,param2)
# Get rid of points not in the domain of the distribution
keep <- is.finite(y)
y <- y[keep]
x <- x[keep]
plot(x,y,type='l',xlim=xlim,lwd=2,col="red",ylim=c(0,max(y)),
ylab="Probability Density", xlab="x", bty="n")
if (!is.null(xdata)) {
points( xdata, rep(0,length(xdata) ),
pch=20, col=rgb(0,0,0,.1) )
dens <- density(xdata)
lines( dens$x, dens$y )
}
}
drawDistribution()
drawDistribution(xdata=runif(100))
dens <- density(xdata)
drawDistribution <- function(fun=dbeta,param1=1,param2=.5,xlim=c(0,1),xdata=NULL){
x <- seq(xlim[1],xlim[2],length=200)
y <- fun(x, param1,param2)
# Get rid of points not in the domain of the distribution
keep <- is.finite(y)
y <- y[keep]
x <- x[keep]
plot(x,y,type='l',xlim=xlim,lwd=2,col="red",ylim=c(0,max(y)),
ylab="Probability Density", xlab="x", bty="n")
if (!is.null(xdata)) {
points( xdata, rep(0,length(xdata) ),
pch=20, col=rgb(0,0,0,.1) )
dens <- density(xdata)
lines( dens$x, dens$y )
}
}
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shiny")
require(shiny)
source('~/.active-rstudio-document', echo=TRUE)
class(dbeta)
source('~/.active-rstudio-document', echo=TRUE)
help(shiny)
source('~/.active-rstudio-document', echo=TRUE)
server = myServer))
source('~/.active-rstudio-document', echo=TRUE)
require(shiny)
y <- fun(x, param1,param2)
drawDistribution(dnorm,.5,1.5,xdata=runif(100),xlim=c(0,2))
),
uniform=list(distParam1='min',distParam2="max",
outsideData <- rbeta(40, shape1=0.2, shape2=1.5)
# stored in a reactive expression.
```{r eval=FALSE}
opts_chunk$set(tidy=FALSE)
require(shiny)
drawDistribution <- function(fun=dbeta,param1=1,param2=.5,xlim=c(0,1),xdata=NULL){
x <- seq(xlim[1],xlim[2],length=200)
y <- fun(x, param1,param2)
# Get rid of points not in the domain of the distribution
keep <- is.finite(y)
y <- y[keep]
x <- x[keep]
plot(x,y,type='l',xlim=xlim,lwd=2,col="red",ylim=c(0,max(y)),
ylab="Probability Density", xlab="x", bty="n")
if (!is.null(xdata)) {
points( xdata, rep(0,length(xdata) ),
pch=20, col=rgb(0,0,0,.1) )
dens <- density(xdata)
lines( dens$x, dens$y )
}
}
drawDistribution(dnorm,.5,1.5,xdata=runif(100),xlim=c(0,2))
myUI <- div(
div(class='jumbotron masthead',
h3('The β Distribution'),
p('Showing the shape of the β distribution.' ),
actionButton(inputId="submitted","Send in your parameters.")
),
div(class='row span9 well',
div(class='span3 well',
selectInput("distDistrib","Choice of Distribution",
list(uniform="uniform",gaussian="normal",
beta="beta", "chi squared" ="chisq"),
selected="beta"),
sliderInput("distParam1", "Parameter 1", min=0.01,max=2,step=0.01, value=0.5),
sliderInput("distParam2", "Parameter 2", min=0.01,max=2,step=0.01, value=0.1)
),
div(class='span4 well',
plotOutput("distPlot1"),
sliderInput("distXrange", "X-axis Range",
min=-10, max=10, step=0.5, value=c(0,1))
)
)
)
paramNames <- function(name){
res <- switch(EXPR=name,
uniform=list(distParam1='min',distParam2="max",
domain=c(-Inf,Inf),
fun=function(x,param1,param2){
if( param1 >= param2 ) stop("Max must be larger than min")
dunif(x,min=param1,max=param2)}),
normal=list(distParam1='mean',distParam2="sd",
domain=c(-Inf,Inf),
fun=function(x,param1,param2){
dnorm(x,mean=param1,sd=param2)}),
beta=list(distParam1='a',distParam2="b",
domain=c(0.001,.999),
fun=function(x,param1,param2){
dbeta(x,shape1=param1,shape2=param2)}),
chisq=list(distParam1='df', distParam2='-- not used --',
domain=c(0,Inf),
fun=function(x, param1,param2){
dchisq(x,df=param1)})
)
return(res)
}
outsideData <- rbeta(40, shape1=0.2, shape2=1.5)
myServer <- function(input,output,session){
# Information that's expensive to calculate or that
# more than one function needs can be
# stored in a reactive expression.
distInfo <- reactive( paramNames(input$distDistrib) )
# Send something new to the plot
output$distPlot1 <- renderPlot({
info <- distInfo()
drawDistribution(fun=info$fun,
param1=input$distParam1, param2=input$distParam2,
xdata=outsideData, xlim=input$distXrange )
})
# Change the slider names
observe( {
input$distDistrib # creates the dependancy
nms <- distInfo()
updateSliderInput(session, inputId='distParam1',
label=nms[['distParam1']])
updateSliderInput(session, inputId='distParam2',
label=nms[['distParam2']] )
})
}
runApp(list(ui = bootstrapPage(myUI),
server = myServer))
require(devtools)
require(COMP121)
table1("edit")
table1 <-collaborate(doc="table1",buffermode="r")
table1("edit")
require(manipulate)
install.packages("manipulate")
buffer("source")
require(manipulate)
require(shiny)
userIDbox <- textInput(inputId="text1",
label="User ID",
value="UserID here.")
classChoicebox <- textInput(inputId="text1",
label="Class Choice:",
value="Class number here.")
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12',
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection')),
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here.")
)
)
ourServer <- function(input,output,session){
}
require(manipulate)
require(shiny)
userIDbox <- textInput(inputId="text1",
label="User ID",
value="UserID here.")
classChoicebox <- textInput(inputId="text1",
label="Class Choice:",
value="Class number here.")
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12',
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection'),
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here.")
)
)
ourServer <- function(input,output,session){
}
)))
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12'),
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection',
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here.")
)))
logUI <- bootstrapPage(
div(class='jumbotron masthead',
h1('User Login and Class Selection')),
div(class='row span12',
div(class='span4',
h4('User ID'),
textInput(inputId="logtextUser",
label="User ID",
value="UserID here")
h4('Class Selection'),
textInput(inputId="logtextClass",
label="Class Choice:",
value="Class number here")
)
)
)
require(devtools)
install_github("DCF", username="dtkaplan")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("mosaic", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
require(DCF)
require(mosaic)
require(DCF)
require(devtools)
require(ggplot2)
load(http://github.com/dtkaplan/DCF/raw/master/data/nhanes.rda)
data(nhanes)
class(nhanes)
names(nhanes)
nrow(nhanes)
nhanes[1:5,1:6]
nhanes[3,]
table(nhanes$age)
plot(nhanes$weight ~ nhanes$height)
plot(nhanes$wgt ~ nhanes$hgt)
plot(wgt ~ hgt, data=nhanes)
small <- sample(nhanes, size=1000)
plot(wgt ~ hgt, data=small)
with(small, table(diab))
plot(wgt ~ hgt, data=small, col="red")
plot(wgt ~ hgt, data=small, col="red","blue")
plot(wgt ~ hgt, data=small, col=c("red","blue"))
diacolors <- with(small, ifelse(diab==0,"blue","red"))
plot(wgt ~ hgt, data=small, col=diacolors)
diasize <- with(small, ifelse(diab==0,1,3))
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize)
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize, pch=20)
diacolors <- with(small, ifelse(diab==0,alpha("blue",.2) alpha("red",.4)))
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize, pch=20)
diacolors <- with(small, ifelse(diab==0,alpha("blue",.2), alpha("red",.4)))
plot(wgt ~ hgt, data=small, col=diacolors, cex=diasize, pch=20)
mPlot(small)
ggplot(data=small, aes(x=hgt, y=wgt)) + geom_point()  + aes(colour=diab) + aes(size=diab) + theme(legend.position="right") + labs(title="")
ggplot(data=small, aes(x=hgt, y=wgt)) + geom_point()  + aes(colour=diab) + aes(size=sex) + theme(legend.position="right") + labs(title="")
data(WakeVotersSmall)
names(WakeVotersSmall)
WakeVotersSmall$first_name
table(WakeVotersSmall$gender)
V <- WakeVotersSmall[[c("gender", "first_name")]]
V <- WakeVotersSmall[c("gender", "first_name")]
class(V)
head(V)
count <- with(V,table(first_name))
lenght(count)
length(count)
with(V,class(first_name))
head(count)
V$FN <- with(V, as.character(first_name) )
head(V)
class(FN)
with(V, class(FN))
with(V, first_name[1:5])
counts = with(V, table(FN))
head(counts)
head(sort(counts, descedning=TRUE))
head(sort(counts, decreasing=TRUE))
nameCounts <- (sort(counts, decreasing=TRUE))
plot(nameCounts)
plot(cumsum(nameCounts))
head(sort(counts, decreasing=TRUE), 200)
head(V)
with(V,order(gender))
bySex <- V[with(V, order(gender)),]
head(bySex)
guys <- subset(V, gender=="M")
girls <- subset(V, gender=="F")
head(girls$FN)
head(guys$FN)
haed(unique(guys$FN))
head(unique(guys$FN))
head(unique(girls$FN))
girls$FN %in% guys$FN
inBoth <- girls$FN %in% guys$FN
table(inBoth)
intersection(girls$FN, guys$FN)
intersect(girls$FN, guys$FN)
guyCount <- table(guys$FN)
girlCount <- table(girls$FN)
head(guyCount)
head(girlCount)
girlFrame <- data.frame(girlCount)
head(girlFrame)
names(girlFrame)
names(girlFrame) <- c("Name", "Females")
names(guyFrame) <- c("Name", "Males")
names(guyFrame)
names(guysFrame) <- c("Name", "Males")
head(cbind(guyFrame, girlFrame) )
guyFrame <- data.frame(guyCount)
head(cbind(guyFrame, girlFrame) )
subset(girlFrame, Name=="Aaron")
both <- merge(guyFrame, girlFrame)
head(both)
both <- merge(guyFrame, girlFrame)
head(both)
head(both, 50)
both$ratio <- with(both, Female/Male)
head(both)
subset(both, ratio > 10)
subset(both, ratio < .10)
subset(both, ratio == 1)
subset(both, ratio < 3, & ratio > .3)
subset(both, ratio < 3 & ratio > .3)
savehistory("~/Documents/Intro to Scientific Programming/CS121-Work/Day-22/Nov 19 console stuff.Rhistory")
